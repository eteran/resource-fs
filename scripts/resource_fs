#!/bin/env python3

import argparse
import os
import uuid
from typing import Any, Generator

import yaml
from jinja2 import Template

c_template = """
#define _GNU_SOURCE
#define _POSIX_C_SOURCE 200809L
#include <dlfcn.h>
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

typedef struct {
    const char *name;
    char *data;
    size_t size;
} resource_t;

{% for res in data.resources %}
/* {{ res.filename }} */
char {{ res.var_name }}[] =
{{ res.content }};
{% endfor %}

const resource_t resources[] = {
{%- for res in data.resources %}
    {"{{ res.name }}", {{ res.var_name }}, sizeof({{ res.var_name }})},
{%- endfor %}
    {NULL, NULL, 0}
};

#ifdef USE_OPEN_COOKIE
typedef struct {
    const char *data;
    size_t size;
    size_t offset;
} resource_cookie_t;

static ssize_t resource_read(void *cookie, char *buf, size_t size) {
    resource_cookie_t *rc = (resource_cookie_t *)cookie;

    if (rc->offset >= rc->size) {
        return 0;
    }

    size_t remaining = rc->size - rc->offset;
    size_t to_read   = size < remaining ? size : remaining;

    memcpy(buf, rc->data + rc->offset, to_read);
    rc->offset += to_read;

    return to_read;
}

static int resource_seek(void *cookie, off64_t *offset, int whence) {
    resource_cookie_t *rc = (resource_cookie_t *)cookie;
    off64_t new_offset;

    switch (whence) {
    case SEEK_SET:
        new_offset = *offset;
        break;
    case SEEK_CUR:
        new_offset = rc->offset + *offset;
        break;
    case SEEK_END:
        new_offset = rc->size + *offset;
        break;
    default:
        return -1;
    }

    if (new_offset < 0 || (size_t)new_offset > rc->size) {
        return -1;
    }

    rc->offset = new_offset;
    *offset    = new_offset;
    return 0;
}

static int resource_close(void *cookie) {
    free(cookie);
    return 0;
}
#endif

typedef FILE *(*fopen_type)(const char *__restrict filename, const char *__restrict modes);

FILE *fopen(const char *__restrict filename, const char *__restrict modes) {

    static fopen_type libc_open = NULL;

    /* check if the file is in our resources */
    int i;
    for (i = 0; resources[i].name != NULL; i++) {
        if (strcmp(filename, resources[i].name) == 0) {

            /* check if the mode is valid */
            if (strcmp(modes, "r") != 0 && strcmp(modes, "rb") != 0) {
                return NULL;
            }

#ifdef USE_OPEN_COOKIE
            resource_cookie_t *cookie = malloc(sizeof(resource_cookie_t));
            if (!cookie) {
                errno = ENOMEM;
                return NULL;
            }

            cookie->data   = resources[i].data;
            cookie->size   = resources[i].size;
            cookie->offset = 0;

            cookie_io_functions_t io_funcs = {
                .read  = resource_read,
                .write = NULL,
                .seek  = resource_seek,
                .close = resource_close};

            return fopencookie(cookie, modes, io_funcs);
#else
            /* return a FILE pointer to our resource */
            return fmemopen(resources[i].data, resources[i].size, modes);
#endif
        }
    }

    /* get reference to original (libc provided) fopen */
    if (!libc_open) {
        *(void **)(&libc_open) = dlsym(RTLD_NEXT, "fopen");
    }

    return libc_open(filename, modes);
}
"""


def chunk_list(data: bytes, chunk_size: int) -> Generator[bytes, Any, Any]:
    """Yield successive n-sized chunks from data."""

    for i in range(0, len(data), chunk_size):
        yield data[i : i + chunk_size]


def main(config: str, output: str) -> None:
    """Main function to generate the resource file."""

    with open(args.config, "r") as f:
        config = yaml.safe_load(f)

    resources = config["resources"]

    if "resources" not in config:
        raise ValueError("No resources found in config")

    options = config.get("options", {})

    for resource in resources:
        if "filename" not in resource:
            raise ValueError("Resource must have a name")

        if "name" not in resource:
            resource["name"] = "res:/" + os.path.basename(resource["filename"])
        else:
            resource["name"] = "res:/" + resource["name"]

        resource_id = uuid.uuid4()
        resource["var_name"] = f"res_{resource_id.hex}"

        if not options.get("use_embed", False):
            with open(resource["filename"], "rb") as f:
                data: bytes = f.read()

                data_str: str = ""
                for chunk in chunk_list(data, 16):
                    data_str += (
                        '    "'
                        + "\\x"
                        + "\\x".join(f"{byte:02x}" for byte in chunk)
                        + '"\n'
                    )

                resource["content"] = data_str.rstrip()
        else:
            resource["content"] = f'{{\n#embed "{resource["filename"]}"\n}}'

    template = Template(c_template)
    generated_code = template.render(data={"resources": resources})

    with open(output, "w") as f:
        f.write(generated_code)
        f.write("\n")

    print(f"Resource file generated at {args.output}")


if __name__ == "__main__":

    parser = argparse.ArgumentParser(description="Generate resource file")
    parser.add_argument(
        "--config",
        type=str,
        default="config.yaml",
        help="Path to the configuration file",
    )
    parser.add_argument(
        "--output",
        type=str,
        default="resources.c",
        help="Path to the output file",
    )
    args = parser.parse_args()
    main(args.config, args.output)
